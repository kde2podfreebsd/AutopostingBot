import asyncio
import os

import telebot
from dotenv import load_dotenv
from telebot.types import LabeledPrice
from telebot.types import ShippingOption
from telebot.async_telebot import AsyncTeleBot
import telebot

load_dotenv()

token = os.getenv("MAIN_BOT_TOKEN")
provider_token = os.getenv("PROVIDER_YOOKASSA_TEST")
bot = AsyncTeleBot(token)

# More about Payments: https://core.telegram.org/bots/payments

prices = [
    LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", amount=500 * 100)
]

shipping_options = [
    ShippingOption(id="instant", title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü").add_price(
        LabeledPrice("Teleporter", 300 * 100)
    ),
    ShippingOption(id="pickup", title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞").add_price(
        LabeledPrice("Pickup", 800 * 100)
    ),
]


@bot.message_handler(commands=["start"])
async def command_start(message):
    await bot.send_message(
        message.chat.id,
        " Use /buy to order one, /terms for Terms and Conditions",
    )


@bot.message_handler(commands=["terms"])
async def command_terms(message):
    await bot.send_message(
        message.chat.id, "Thank you for shopping with our Autoposting bot!\n"
    )


@bot.message_handler(commands=["buy"])
async def command_pay(message):
    await bot.send_message(
        message.chat.id,
        "üîó –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! –î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —ç–∫–≤–∞–π—Ä–∏–Ω–≥–æ–º Yookassa. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
        parse_mode="Markdown",
    )
    await bot.send_invoice(
        message.chat.id,  # chat_id
        "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü",  # title
        "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –Ω–∞ —Å–≤—è–∑–∫—É",  # description
        "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü",  # invoice_payload
        provider_token,  # provider_token
        "RUB",  # currency
        prices
    )


@bot.shipping_query_handler(func=lambda query: True)
async def shipping(shipping_query):
    print(shipping_query)
    await bot.answer_shipping_query(
        shipping_query.id,
        ok=True,
        shipping_options=shipping_options,
        error_message="–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É",
    )


@bot.pre_checkout_query_handler(func=lambda query: True)
async def checkout(pre_checkout_query):
    await bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True,
        error_message="–ß—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É",
    )


@bot.message_handler(content_types=["text"])
async def HandlerTextMiddleware(message):
    if message.text == "kek":
        print("kek")


@bot.message_handler(content_types=["successful_payment"])
async def got_payment(message):

    await bot.send_message(
        message.chat.id,
        f'''
‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏/–ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount / 100} {message.successful_payment.currency}. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞ –∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø–æ—Å—Ç–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

üîó –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–≤—è–∑–∫—É. –î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–≤—è–∑–∫—É'. –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞, —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞.

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º.        
'''
    )


async def polling():
    task1 = asyncio.create_task(bot.infinity_polling())
    await task1


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(polling())
    except KeyboardInterrupt:
        pass
    finally:
        loop.run_until_complete(loop.shutdown_asyncgens())
        loop.close()